<?php

namespace AppBundle\Repository;
use AppBundle\Entity\ApiTaxi360\Transaction;
use AppBundle\Entity\CashRegister\CashRegister;
use AppBundle\Entity\User;
use Doctrine\DBAL\DBALException;
use PDO;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Zwraca listę transakcji w oknie głównym o do pliku csv
     * @param array $params
     * @param bool $csv
     * @return array
     */
    public function findTransactions($params = array(), $csv = false)
    {
        $sql = "SELECT 
            t.id,t.transaction_date transactionDate, s.total_amount totalAmount,
            s.settled_amount settledAmount, s.id settlementId,
            s.amount_with_fee amountWithFee, t.transaction_type transactionType,
            d.license_number licenseNumber, concat(d.first_name, ' ', d.surname) as driver, 
            ifnull(t.original_pan, voucher_number) originalPan, t.card_type cardType, 
            case when t.is_settled = 0 then 'NIE' else 'TAK' end settlement, 
            concat(format(s.percentage*100,0),'%') percentage,
            c.agreement_number agreementNumber, c.name client, s.is_reseted
            FROM transaction t
            JOIN settlement s ON t.id = s.transaction_id
            LEFT JOIN client c ON t.client_id = c.id
            LEFT JOIN driver d ON t.driver_id = d.id
          WHERE 1=1 
            AND date(t.transaction_date) >= :dateFrom
            AND date(t.transaction_date) <= :dateTo";

        if(!empty($params['licenseNumber'])){
            $sql .= " AND d.license_number like '{$params['licenseNumber']}%'";
        }

        if(!empty($params['clientNumber'])){
            $sql .= " AND c.agreement_number like '{$params['clientNumber']}%'";
        }

        if(!empty($params['cardNumber'])){
            $sql .= " AND t.original_pan like '{$params['cardNumber']}%'";
        }

        try{
            $pdo = $this->getEntityManager()->getConnection();
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array(
                ":dateFrom" => $params["dateFrom"],
                ":dateTo" => $params["dateTo"]
            ));
            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                if($csv != true)
                {
                    $row['settlement'] = ($row['settlement'] == 'TAK')
                        ? '<i class="green icon checkmark"></i>': '<i class="red icon close"></i>';
                    $row['edit'] = '<i class="edit outline icon pointer" data-id="'.$row['id'].'"></i>';
                    $row['percentage'] = '<button class="ui tiny button btnPercentage" 
                        title="Naciśnij aby zmienić procent"
                        data-id="'.$row['settlementId'].'">'.$row['percentage'].'</button>';
                    if($row['is_reseted'] == 1)
                    {
                        $row['totalAmount'] = '<button class="ui tiny button btnResetAmount" title="Przywróć wartości"
                        data-id="'.$row['settlementId'].'">'.$row['totalAmount'].'</button>';
                    }else{
                        $row['totalAmount'] = '<button class="ui tiny button btnResetAmount" title="Wyzeruj transakcje"
                        data-id="'.$row['settlementId'].'">'.$row['totalAmount'].'</button>';
                    }

                }
                $result[] =  $row;
            }

            return $result;
        }catch(DBALException $e){

        }
    }

    /**
     * Pobiera transakcjie do rozliczenia
     * @param $params
     * @return array
     */
    public function findTransactionForSettlement($params)
    {
        $pdo = $this->getEntityManager()->getConnection();
        $sql = "SELECT t.id, t.transaction_date, 
                  if(t.voucher_number is null, t.transaction_type, concat(t.transaction_type,'(v)')) transaction_type,
                  s.total_amount, sum(s.settled_amount) settled_amount, 
                  s.total_amount-sum(s.settled_amount) for_settlement,
                  c.name client, round(s.percentage*100,1) as percentage,
                  round((s.total_amount-sum(s.settled_amount)-(s.total_amount-sum(s.settled_amount))* s.percentage),2) to_pay
                FROM transaction t
                  LEFT JOIN client c ON t.client_id = c.id
                  LEFT JOIN settlement s ON t.id = s.transaction_id
                WHERE 1=1
                    AND t.driver_id = :driverId
                    AND t.is_settled = 0
                    AND t.transaction_status = 'ACCEPTED'
                GROUP BY t.id, t.transaction_date, t.transaction_type, s.total_amount, c.name,s.percentage
              ";

        if($params['bankTransaction'] == true && $params['ownCards'] == false)
        {
            $sql .= " AND t.transaction_type = 'importpekao'";
        }elseif($params['bankTransaction'] == false && $params['ownCards'] == true){
            $sql .= " AND t.transaction_type = 'bezgotowka'";
        }elseif($params['bankTransaction'] == true  && $params['ownCards'] == true){
            $sql .= " AND t.transaction_type IN('bezgotowka','importpekao')";
        }else{
            $sql .= "AND t.transaction_type is null";
        }

        $sql .= " ORDER BY t.transaction_date " .$params['sort'];

        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array(
                ':driverId' => $params['driverId'],
            ));
        }catch(DBALException $e){

        }

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Rozliczenie transakcji bezgotówkowych - UPDATE
     * @param $transactions array
     * @param $user User
     * @param $cashRegister CashRegister
     */
    public function settleTransactions($transactions, $cashRegister, $user)
    {
        $sql = "UPDATE settlement s
                        LEFT JOIN transaction t ON s.transaction_id = t.id
                          SET t.is_settled = 1,
                            t.update_date = NOW(),
                            s.settlement_date = NOW(),
                            s.user_id = :userId,
                            s.settled_amount = :settledAmount,
                            s.settled_percentage = :settledPercentage,
                            s.amount_with_fee = :amountWithFee,
                            s.cash_register_id = :cashRegister,
                            s.update_date = NOW(),
                            s.is_settled = 1
                    WHERE 1=1
                      AND t.id = :transactionId
                      AND s.is_settled = 0";
        /**
         * @var PDO $pdo
         */
        $pdo = $this->getEntityManager()->getConnection();
        $stmt = $pdo->prepare($sql);
        foreach ($transactions as $transaction) {
            if($transaction['forSettlement'] == $transaction['amount'])
            {
                try{
                    $stmt->execute(array(
                        ':userId' => $user->getId(),
                        ':settledAmount' => $transaction['amount'],
                        ':amountWithFee' => $transaction['toPay'],
                        ':settledPercentage' => $transaction['percentage']/100,
                        ':transactionId' => $transaction['id'],
                        ':cashRegister' => $cashRegister->getId()
                    ));
                }catch(DBALException $e){

                }
            }else{

            }
        }
    }

    /**
     * Pobieranie transakcji nieprzypisanych do kierowcy
     * @return array
     * @throws DBALException
     */
    public function getUnassignedTransactionList()
    {
        $sql = "SELECT
                  t.id, t.transaction_date transactionDate, t.original_tid posTidNumber, t.total_amount totalAmount,
                  s.amount_with_fee amountWithFee, card_type cardType
                FROM transaction t
                  LEFT JOIN settlement s ON t.id = s.transaction_id
                WHERE 1=1
                  AND t.transaction_status = 'ACCEPTED'
                  AND driver_id is NULL";
        $pdo = $this->getEntityManager()->getConnection();
        $stmt = $pdo->query($sql);

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Pobiera transakcje które nie są przypisane do żadnego kierowcy
     * @param array $params
     * @return array
     * TODO: Zmienic prametr na wyswietlanie tylko voucherow
     * TODO: ZMienic na wysyłanie danych stopniowo a nie wyrzucać wszystko od razu
     */
    public function getVoucherList($params = array())
    {
        $sql = "SELECT concat(d.first_name,' ',d.surname) driver, 
              d.license_number licenseNumber, c.name client, 
              date_format(t.transaction_date,'%Y-%m-%d') transactionDate, 
              t.total_amount totalAmount, concat(format(s.percentage*100,0),'%') percentage, 
              t.voucher_number voucherNumber, t.voucher_description voucherDescription,
              t.update_date updateDate
            FROM transaction t
              LEFT JOIN driver d ON t.driver_id = d.id
              LEFT JOIN client c ON t.client_id = c.id
              LEFT JOIN settlement s ON t.id = s.transaction_id
            WHERE 1=1
                AND t.is_voucher919 = 1
                AND date(t.transaction_date) >= :dateFrom
                AND date(t.transaction_date) <= :dateTo";
        try{
            $pdo = $this->getEntityManager()->getConnection();
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array(
                ':dateFrom' => $params['dateFrom'],
                ':dateTo' => $params['dateTo']
            ));
            return $stmt->fetchAll(\PDO::FETCH_ASSOC);
        }catch(DBALException $e){

        }
    }


    /**
     * Pobiera transakcje do faktur dla firm
     * @param array $params
     */
    public function getTransactionForInvoice($params = array())
    {
        $sql = "SELECT c.id, 
              c.name clientName, c.agreement_number agreementNumber, count(total_amount) transactionNumber,sum(total_amount) totalAmount,
              min(transaction_date) firstTransaction, max(transaction_date) lastTransaction
            FROM transaction t
              LEFT JOIN client c ON t.client_id = c.id
              LEFT JOIN passenger p ON t.taxi_passenger_id = p.taxi_passenger_id
            WHERE 1=1
              AND  date_format(transaction_date,'%Y') = :transactionYear
              AND  date_format(transaction_date,'%m') = :transactionMonth
              AND transaction_status = 'ACCEPTED'
              AND client_invoice_id is null 
            GROUP BY c.name";
        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }

    public function getTransactionForInvoiceDetails($params = array())
    {
        $sql = "SELECT
                  c.id clientId,
                  c.name             clientName,
                  c.agreement_number agreementNumber,
                  c.discount clientDiscount,
                  c.payment_days paymentDays,
                  t.id transactionId,
                  t.total_amount totalNetto,
                  t.vat,
                  CAST((t.total_amount*t.vat+t.total_amount) AS DECIMAL(10,2)) totalBrutto,
                  TRANSACTION_DATE   transactionDate
                FROM transaction t
                  LEFT JOIN client c ON t.client_id = c.id
                  LEFT JOIN passenger p ON p.id = t.taxi_passenger_id
                WHERE 1=1
                      AND date_format(TRANSACTION_DATE, '%Y') = :transactionYear
                      AND date_format(TRANSACTION_DATE, '%m') = :transactionMonth
                      AND TRANSACTION_STATUS = 'ACCEPTED'
                      AND CLIENT_INVOICE_ID IS NULL
                      AND CLIENT_ID = :clientId";

        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month'],
                ':clientId' => $params['clientId']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }

    public function getTransactionForDriverInvoiceDetails($params = array())
    {
        $sql = "SELECT
                  d.id driverId,
                  concat(d.first_name, ' ', d.surname) AS name,
                  t.id transactionId,
                  t.total_amount totalNetto,
                  t.vat,
                  CAST((t.total_amount*t.vat+t.total_amount) AS DECIMAL(10,2)) totalBrutto,
                  TRANSACTION_DATE   transactionDate
                FROM transaction t
                  LEFT JOIN driver d ON t.driver_id = d.id
                  LEFT JOIN passenger p ON p.id = t.taxi_passenger_id
                WHERE 1=1
                      AND date_format(TRANSACTION_DATE, '%Y') = :transactionYear
                      AND date_format(TRANSACTION_DATE, '%m') = :transactionMonth
                      AND TRANSACTION_STATUS = 'ACCEPTED'
                      AND driver_invoice_id IS NULL
                      AND driver_id = :driverId";

        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month'],
                ':driverId' => $params['driverId']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }

    /**
     * Aktualizuje transakcje uzupełniają numer faktury
     * @param array $params
     * @return array
     */
    public function updateTransactionByInvoice($transactions, $fv)
    {
        $manager = $this->getEntityManager();
        foreach ($transactions as $transaction)
        {
            $transaction = $this->find($transaction);
            $transaction->setClientInvoice($fv);

            $manager->persist($transaction);
        }

        $manager->flush();
    }

    public function updateTransactionByDriverInvoice($transactions, $fv)
    {
        $manager = $this->getEntityManager();
        foreach ($transactions as $transaction)
        {
            $transaction = $this->find($transaction);
            $transaction->setDriverInvoice($fv);

            $manager->persist($transaction);
        }

        $manager->flush();
    }

    public function getInvoice($params = [])
    {
        $sql = "SELECT
                i.id,
                i.invoice_number invoiceNumber,
                i.create_date createDate,
                c.name, c.agreement_number agreementNumber, c.nip,
                i.amount_netto amountNetto, i.vat, i.amount_brutto amountBrutto
            FROM invoice i
                LEFT JOIN client c ON c.id  = i.buyer
            WHERE invoice_type_id = 1
                AND date_format(create_date, '%Y') = :transactionYear
                AND date_format(create_date, '%m') = :transactionMonth ";
        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $row['printBtn'] = '<button title="Drukuj" class="printInvoice" id="'.$row['id'].'"><i class="print icon"></i></button>';
                $row['editBtn'] = '<button title="Edytuj" class="editInvoice" id="'.$row['id'].'"><i class="edit icon"></i></button>';
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }

    public function getTransactionForInvoiceAttachment($invoiceId)
    {
        $sql = "select
              i.invoice_number invoiceNumber, format(i.discount*100,1) invoiceDiscount,
              c.name clientName, c.address_street clientStreet ,
              concat(c.address_postal_code,' ',c.address_town) clientCity, c.nip clientNip,
              date_format(t.transaction_date,'%Y-%m-%d') transactionDate,
              t.original_license_number licenseNumber, t.original_pan originalPan,
              t.total_amount totalAmount, t.vat, 
              t.comment, concat(p.first_name, ' ',p.surname) passangerName
            from transaction t
              JOIN invoice i ON t.client_invoice_id = i.id
              JOIN client c ON t.client_id = c.id
              left join passenger p on t.taxi_passenger_id = p.taxi_passenger_id
            where 1=1
              and client_invoice_id = :invoiceId
            order by transactionDate";
        $pdo = $this->getEntityManager()->getConnection();
        $rows = $pdo->prepare($sql);
        $rows->execute([
            ':invoiceId' => $invoiceId
        ]);
        $result = [];
        while ($row = $rows->fetch(\PDO::FETCH_ASSOC))
        {
            $result['invoiceNumber'] = $row['invoiceNumber'];
            $result['invoiceDiscount'] = $row['invoiceDiscount'];
            $result['clientName'] = $row['clientName'];
            $result['clientStreet'] = $row['clientStreet'];
            $result['clientCity'] = $row['clientCity'];
            $result['clientNip'] = $row['clientNip'];
            $result['vat'] = $row['vat'];
            if(!isset($result[$row['vat']*1000]['totalAmount']))
            {
                $result[$row['vat']*1000]['totalAmount'] = $row['totalAmount'];
            }else{
                $result[$row['vat']*1000]['totalAmount'] += $row['totalAmount'];
            }

            if(isset($result['minTransactionDate']))
            {
                $result['minTransactionDate'] = ($result['minTransactionDate'] > $row['transactionDate'])
                    ? $row['transactionDate'] : $result['minTransactionDate'];
            }else{
                $result['minTransactionDate'] = $row['transactionDate'];
            }
            if(isset($result['maxTransactionDate']))
            {
                $result['maxTransactionDate'] = ($result['maxTransactionDate'] < $row['transactionDate'])
                    ? $row['transactionDate'] : $result['maxTransactionDate'];
            }else{
                $result['maxTransactionDate'] = $row['transactionDate'];
            }

            $result['items'][] = $row;
        }

        return $result;
    }


    /**
     * DRIVER
     */
    public function getTransactionForDriverInvoice($params = array())
    {
        $sql = "SELECT
              t.id transactionId, d.id driverId,
              concat(d.first_name, ' ', d.surname) driver, d.license_number licenseNumber, d.is_baggage isBaggage,
              d.vat_payer vatPayer, d.vat, d.blocked, d.firm_name driverCompany, 't' as nextInvoiceNumber,
              s.amount_with_fee amountWithFee,
              t.transaction_type transactionType,
              count(t.total_amount) transactionNumber,sum(t.total_amount) totalAmount,
              min(t.transaction_date) firstTransaction, max(t.transaction_date) lastTransaction
            FROM transaction t
              JOIN settlement s ON t.id = s.transaction_id
              LEFT JOIN driver d ON d.id = t.driver_id
            WHERE 1=1
              AND  date_format(t.transaction_date,'%Y') = :transactionYear
              AND  date_format(t.transaction_date,'%m') = :transactionMonth
              AND t.transaction_status = 'ACCEPTED'
              AND t.is_settled = 0
              AND driver_invoice_id IS NULL
            GROUP BY d.license_number";

        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }

    public function getDriverInvoice($params = [])
    {
        $sql = "SELECT
                  i.id,
                  IFNULL(ds.license_number, db.license_number) licenseNumber,
                  i.transaction_type transactionType, i.invoice_number invoiceNumber,
                  f.format documentType,
                  db.firm_name AS buyer,
                  it.invoice_type type,
                  i.amount_brutto amountToPay
                FROM invoice i
                  LEFT JOIN invoice_type it ON i.invoice_type_id = it.id
                  LEFT JOIN invoice_format f ON i.invoice_format_id = f.id
                  LEFT JOIN driver ds ON ds.id = i.seller
                  LEFT JOIN driver db ON db.id = i.buyer
                WHERE invoice_type_id = 2
                      AND date_format(create_date, '%Y') = :transactionYear
                      AND date_format(create_date, '%m') = :transactionMonth";
        $pdo = $this->getEntityManager()->getConnection();
        try{
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':transactionYear' => $params['year'],
                ':transactionMonth' => $params['month']
            ]);

            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $row['printBtn'] = '<button class="print-invoice" id="'.$row['id'].'"><i class="print icon"></i></button>';
                $row['seller'] = 'RADIO TAXI 919';
                $result[] = $row;
            }
            return $result;
        }catch(DBALException $e){

        }
    }


    public function getTransactionForDriverInvoiceAttachment($invoiceId)
    {
        $sql = "select
              i.invoice_number invoiceNumber, format(i.discount*100,1) invoiceDiscount,
              date_format(t.transaction_date,'%Y-%m-%d') transactionDate,
              t.original_license_number licenseNumber, t.original_pan originalPan,
              t.total_amount totalAmount, t.vat,
              firm_name AS driverName, nip, address_street AS driverStreet, address_town AS driverCity, address_postal_code AS driverPostalCode,
              t.vat AS comment
              FROM invoice i
              LEFT JOIN invoice_type it ON i.invoice_type_id = it.id
              LEFT JOIN invoice_format f ON i.invoice_format_id = f.id
              LEFT JOIN driver d ON d.id = i.buyer
              LEFT JOIN transaction t ON t.driver_invoice_id = i.id
                WHERE invoice_type_id = 2
                AND driver_invoice_id = :invoiceId
                ORDER BY transactionDate";
        $pdo = $this->getEntityManager()->getConnection();
        $rows = $pdo->prepare($sql);
        $rows->execute([
            ':invoiceId' => $invoiceId
        ]);
        //dump($rows->fetchAll()); die;
        $result = [];
        while ($row = $rows->fetch(\PDO::FETCH_ASSOC))
        {
            $result['invoiceNumber'] = $row['invoiceNumber'];
            $result['invoiceDiscount'] = $row['invoiceDiscount'];
            $result['clientName'] = $row['driverName'];
            $result['clientStreet'] = $row['driverStreet'];
            $result['clientCity'] = $row['driverCity'];
            $result['driverPostalCode'] = $row['driverPostalCode'];
            $result['clientNip'] = $row['nip'];
            $result['passangerName'] = $row['driverName'];
            $result['vat'] = $row['vat'];
            if(!isset($result[$row['vat']*1000]['totalAmount']))
            {
                $result[$row['vat']*1000]['totalAmount'] = $row['totalAmount'];
            }else{
                $result[$row['vat']*1000]['totalAmount'] += $row['totalAmount'];
            }

            if(isset($result['minTransactionDate']))
            {
                $result['minTransactionDate'] = ($result['minTransactionDate'] > $row['transactionDate'])
                    ? $row['transactionDate'] : $result['minTransactionDate'];
            }else{
                $result['minTransactionDate'] = $row['transactionDate'];
            }
            if(isset($result['maxTransactionDate']))
            {
                $result['maxTransactionDate'] = ($result['maxTransactionDate'] < $row['transactionDate'])
                    ? $row['transactionDate'] : $result['maxTransactionDate'];
            }else{
                $result['maxTransactionDate'] = $row['transactionDate'];
            }

            $result['items'][] = $row;
        }

        return $result;
    }

    public function getDataForRegisterBook($month, $year){
        $sql = "SELECT c.name, concat(c.mailing_address_street,', ', c.mailing_address_postal_code,' ',c.mailing_address_town) AS mailing_address
                FROM transaction
                JOIN invoice ON client_invoice_id = invoice.id
                JOIN client c ON client_id = c.id
                WHERE
                date_format(transaction_date, '%Y') = :transactionYear
                AND date_format(transaction_date, '%m') = :transactionMonth";
        $pdo = $this->getEntityManager()->getConnection();
        $rows = $pdo->prepare($sql);
        $rows->execute([
            ':transactionMonth' => $month,
            ':transactionYear' => $year
        ]);
        return $rows->fetchAll();
    }

    public function getDataForEnvelopes($month, $year){
        $sql = "SELECT c.name, c.mailing_address_street, c.mailing_address_postal_code, c.mailing_address_town
                FROM transaction  
                JOIN invoice ON client_invoice_id = invoice.id
                JOIN client c ON client_id = c.id
                WHERE
                date_format(transaction_date, '%Y') = :transactionYear
                AND date_format(transaction_date, '%m') = :transactionMonth";
        $pdo = $this->getEntityManager()->getConnection();
        $rows = $pdo->prepare($sql);
        $rows->execute([
            ':transactionMonth' => $month,
            ':transactionYear' => $year
        ]);
        return $rows->fetchAll();
    }
}
