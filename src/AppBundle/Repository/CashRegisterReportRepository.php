<?php

namespace AppBundle\Repository;
use AppBundle\Entity\CashRegister\CashRegister;
use AppBundle\Entity\CashRegister\CashRegisterReport;
use AppBundle\Entity\User;

/**
 * CashRegisterReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CashRegisterReportRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Dodaje ID raport do transakcji
     * @param $reportId
     * @param $reportType
     * @param $transactions
     * @throws \Doctrine\DBAL\DBALException
     */
    public function addReportIdToSettlements($reportId, $reportType, $transactions)
    {
        $pdo = $this->getEntityManager()->getConnection();

        if($reportType == CashRegisterReport::DAILY_REPORT)
        {
            $sql = "UPDATE cash_register c 
                  SET c.report_id = {$reportId}
                WHERE c.id in ({$transactions})";
        }else{
            $sql = "UPDATE cash_register c 
                  SET c.monthly_report_id = {$reportId}
                WHERE c.id in ({$transactions})";
        }


        $pdo->exec($sql);
    }

    /**
     * Sprawdza czy istnieje raport o podanym typie i urzytkowniku
     * @param \DateTime $dateTime
     * @param $type
     * @param User $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findReportByTypeAndDate(\DateTime $dateTime, $type,User $user)
    {
        $qb = $this->createQueryBuilder('r')
            ->where('r.user = :userId')
            ->andWhere('r.reportType = :type' )
            ->setParameter('userId', $user->getId())
            ->setParameter('type', $type)
        ;
        if($type == CashRegisterReport::MONTHLY_REPORT)
        {
            $qb
                ->andWhere("r.reportForDate >= :dateTimeF AND r.reportForDate <= :dateTimeL")
                ->setParameter('dateTimeF', $dateTime->format('Y-m-01'))
                ->setParameter('dateTimeL', $dateTime->format('Y-m-t'))
            ;
        }else{
            $qb
                ->andWhere('r.reportForDate = :dateTime')
                ->setParameter('dateTime', $dateTime);
        }
        
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Pobiera dane potrzebne do wydrukowania raportu
     * @param $id
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findPrintReportData($id)
    {
        $pdo = $this->getEntityManager()->getConnection();
        $sql = "SELECT
              cr.report_number reportNumber, cr.kp_count kpCount, cr.kp_amount kpAmount,
              cr.kw_count kwCount, cr.kw_amount kwAmount,  cr.report_type reportType,
              cr.amount totalAmount, cr.prev_amount prevAmount, cr.change_amount changeAmount,
              c.transaction_type transactionType, c.cash_register_number cashRegisterNumber, 
              sum(cd.brutto) amount,
              IFNULL(concat(d.license_number,' ',d.first_name, ' ', d.surname), c2.name) client,
              u.username, u.position, c.title, cr.report_for_date forDate
            FROM cash_register_report cr
              JOIN user u ON cr.user_id = u.id
              JOIN cash_register c ON 
                  c.report_id = cr.id OR c.monthly_report_id = cr.id
              JOIN cash_register_detail cd ON c.id = cd.cash_register_id
              LEFT JOIN param p ON cd.param_id = p.id
              LEFT JOIN driver d ON c.driver_id = d.id
              LEFT JOIN client c2 ON c.client_id = c2.id
            WHERE 1=1
                  AND cr.id = :id
             GROUP BY c.id";

        $stmt = $pdo->prepare($sql);
        $stmt->execute([':id' => $id]);
        $result = [];
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
        {
            $result['reportNumber'] = $row['reportNumber'];
            $result['kpCount'] = $row['kpCount'];
            $result['kpAmount'] = $row['kpAmount'];
            $result['kwCount'] = $row['kwCount'];
            $result['kwAmount'] = $row['kwAmount'];
            $result['totalAmount'] = $row['totalAmount'];
            $result['prevAmount'] = $row['prevAmount'];
            $result['changeAmount'] = $row['changeAmount'];
            $result['username'] = $row['username'];
            $result['position'] = $row['position'];
            $result['forDate'] = $row['forDate'];
            $result['reportType'] = $row['reportType'];

            if($row['transactionType'] == CashRegister::TYPE_KW)
            {
                $kw['cashRegisterNumber'] = $row['cashRegisterNumber'];
                $kw['client'] = $row['client'];
                $kw['title'] = $row['title'];
                $kw['amount'] = $row['amount'];

                $result[CashRegister::TYPE_KW][] = $kw;
            }else{
                $kp['cashRegisterNumber'] = $row['cashRegisterNumber'];
                $kp['client'] = $row['client'];
                $kp['title'] = $row['title'];
                $kp['amount'] = $row['amount'];

                $result[CashRegister::TYPE_KP][] = $kp;
            }
        }

        return $result;
    }

    /**
     * Zwraca listę raportów
     * @param array $params
     * @return array
     */
    public function findReports($params = array())
    {
        $sql = "SELECT 
            report_for_date reportForDate,
            report_number reportNumber,
            kp_count kpCount,
            kw_count kwCount,
            amount,
            prev_amount prevAmount,
            change_amount changeAmount,
            kp_amount kpAmount,
            kw_amount kwAmount
            FROM cash_register_report
          WHERE 1=1 
            AND date(report_for_date) >= :dateFrom
            AND date(report_for_date) <= :dateTo";

        try{
            $pdo = $this->getEntityManager()->getConnection();
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array(
                ":dateFrom" => $params["dateFrom"],
                ":dateTo" => $params["dateTo"]
            ));
            $result = [];
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                $result[] =  $row;
            }

            return $result;
        }catch(DBALException $e){

        }
    }
}
