<?php

namespace AppBundle\Repository;
use Doctrine\Common\Persistence\Mapping\ClassMetadata;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{
    private $pdo;

    /**
     * CardRepository constructor.
     */
    public function __construct(EntityManagerInterface $em, ClassMetadata $class)
    {
        parent::__construct($em, $class);
        $this->pdo = $this->getEntityManager()->getConnection();
    }

    public function getClientsList($params = array())
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c.id, c.name, c.nip, c.phoneNumber as phone, c.agreementNumber,
                c.agreementUntil, c.addressStreet street, c.addressPostalCode pcode, c.addressTown town,
                c.addressCountry country');

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Aktualizacja prowizji u klientów na podstawie głównych ustawień aplikacji
     * @param $params
     */
    public function updateClientsProvision($params)
    {
        $qb = $this->createQueryBuilder('c')->update();

        if(!empty($params['voucherProvision']))
        {
            $qb->set('c.voucherProvision',':vProvision')
                ->setParameter('vProvision', $params['voucherProvision']);
        }

        if(!empty($params['eVoucherProvision']))
        {
            $qb->set('c.eVoucherProvision', $params['eVoucherProvision']);
        }

        if(!empty($params['cardProvision']))
        {
            $qb->set('c.cardProvision', ':cProvision')
                ->setParameter('cProvision', $params['cardProvision']);
        }

        /**
         * Aktualizacja tylko tych którzy nie maja własnych ustawień
         */
        $qb->where('c.ownProvision = 0');

        $qb->getQuery()->execute();
    }

    public function getClientNote($name)
    {
        $qb = $this->createQueryBuilder('c')
            ->select("c.comment")
            ->where("c.name = ".$name);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
