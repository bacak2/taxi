<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Enumerator;
use Doctrine\Common\Persistence\Mapping\ClassMetadata;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EnumeratorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Zwraca kolejny numer dla dokumentu
     * @param $type
     * @param null $user
     * @return Enumerator
     */
    public function getEnumerator($type, $user = null)
    {
        $now = new \DateTime();
        $sql = "SELECT max(number)+1 as new_number, `year` as y, `month` as m 
            FROM enumerator
            WHERE 1=1 
              AND enum_type = :type
              AND year(create_date) = :year
              AND month(create_date) = :month";

        try {
            $pdo = $this->getEntityManager()->getConnection();
            $stmt = $pdo->prepare($sql);
            $stmt->execute(array(
                ':year' => $now->format('Y'),
                ':month' => $now->format('m'),
                ':type' => $type
            ));

            $enumerator = new Enumerator();
            while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
            {
                if($row['new_number'] == NULL)
                {
                    $row['new_number'] = 1;
                    $row['y'] = $now->format('Y');
                    $row['m'] = $now->format('m');
                }

                $enumerator->setMonth($row['m'])
                    ->setYear($row['y'])
                    ->setEnumType($type)
                    ->setNumber($row['new_number'])
                    ->setUser($user)
                ;
            }
            return $enumerator;
        } catch (DBALException $e) {

        }
    }
}
