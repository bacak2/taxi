<?php

namespace AppBundle\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DriverRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface, UserLoaderInterface
{
    public function getDriverID()
    {
        $qb = $this->createQueryBuilder('d')
            ->select('d.id')
            ->where('d.driverId');
    }

    /**
     * @Kierowcy - lista kierowcÃ³w
     * @param array $params
     * @return array
     */
    public function getDriversList($params = array())
    {
        $qb = $this->createQueryBuilder('d')
            ->select("d.id, concat(d.firstName, ' ', d.surname) as driverName, 
            d.licenseNumber, d.firmName, d.mobileNumber, d.email, d.status");

        return $qb->getQuery()->getArrayResult();
    }

    public function loadUserByUsername($username)
    {
        $user = $this->createQueryBuilder('d')
            ->where('d.licenseNumber = :licenseNumber')
            ->setParameter('licenseNumber', $username)
            ->getQuery()
            ->getSingleResult()
        ;
    }

    public function refreshUser(UserInterface $user)
    {

    }

    public function supportsClass($class)
    {
        dump($class);
        die;
    }

    public function getDriverNote($id)
    {
        $qb = $this->createQueryBuilder('d')
            ->select("d.comment")
            ->where("d.id = ".$id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getDriverNoteByLN($ln)
    {
        $qb = $this->createQueryBuilder('d')
            ->select("d.comment")
            ->where("d.licenseNumber = ".$ln);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
