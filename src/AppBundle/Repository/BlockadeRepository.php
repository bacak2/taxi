<?php /** @noinspection ALL */

namespace AppBundle\Repository;
use AppBundle\Entity\ApiTaxi360\Transaction;
use AppBundle\Service\HelperService;
use Doctrine\Common\Persistence\Mapping\ClassMetadata;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use PDO;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlockadeRepository extends \Doctrine\ORM\EntityRepository
{
    private $pdo;

    /**
     * CardRepository constructor.
     */
    public function __construct(EntityManagerInterface $em, ClassMetadata $class)
    {
        parent::__construct($em, $class);
        $this->pdo = $this->getEntityManager()->getConnection();
    }

    /**
     * Pobiera informacje o zablokowanych kierowcach
     * @return array
     * @throws DBALException
     */
    public function getBlockedDrivers()
    {
        $sql = "SELECT
              b.id, d.id driverId,
              d.first_name firstName, d.surname lastName, d.license_number licenseNumber,
              b.is_active isActive, date_format(b.blockade_date, '%Y-%m-%d') blockadeDate,
              b.comment, sum(s.total_amount) totalAmount, b.blockade_type blockadeType 
            FROM blockade b
                LEFT JOIN driver d ON b.driver_id = d.id
                LEFT JOIN transaction t ON d.id = t.driver_id
                LEFT JOIN settlement s ON t.id = s.transaction_id
            WHERE 1=1
                AND s.is_settled = 0
            GROUP BY b.id";

        $stmt = $this->pdo->query($sql);
        $result = [];
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
        {
            if($row['isActive'] == 1)
            {
                $row['isActive'] = '<i class="green icon checkmark"></i>';
                $row['edit'] = '<i class="window close red icon remove-blockade" 
                    data-id="'.$row['id'].'" data-driver="'.$row['driverId'].'"></i>';
            }else{
                $row['isActive'] = '<i class="icon close"></i>';
                $row['edit'] = '';
            }

            $result[] = $row;
        }

        return $result;
    }

    /** Pobiera informacje o transakcjach dla blokad */
    public function findTransactionsForDriver($driver, $transactionType)
    {
        $sql = sprintf("SELECT
              t.transaction_date transactionDate, 
              t.transaction_type transactionType,
              sum(s.total_amount)amount, 
              sum(s.amount_with_fee) amountWithFee, 
              s.percentage
            FROM transaction t
              JOIN settlement s ON t.id = s.transaction_id
            WHERE 1=1
              AND t.transaction_status = 'ACCEPTED'
              AND t.driver_id = :driver
              AND s.is_settled = 0 
              %s
            GROUP BY
              t.transaction_date, t.transaction_type, s.percentage",
            ($transactionType == Transaction::WSZYSTKIE) ? null : " AND t.transaction_type = :transactionType"
            );

        $pdo = $this->getEntityManager()->getConnection();
        $stmt = $pdo->prepare($sql);
        if($transactionType !== Transaction::WSZYSTKIE){
            $stmt->bindValue(':transactionType', $transactionType);
        }
        //$stmt->bindValue(':transactionType', $transactionType);
        $stmt->bindValue(':driver', $driver);
        $stmt->execute();

        $result = [];
        $result['totalAmount'] = 0;
        $result['totalAmountToPay'] = 0;
        $result['items'] = [];
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC))
        {
            $row['toPay'] = ($row['amount']-$row['amount']*$row['percentage']);
            $result['items'][] = $row;

            $result['totalAmount'] += $row['amount'];
            $result['totalAmountToPay'] += number_format($row['toPay'],2);
        }

        return $result;
    }
}
